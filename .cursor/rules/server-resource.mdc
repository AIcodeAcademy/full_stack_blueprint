---
description: 
globs: 
---
---
description: How to create a reource for the API
globs: src/server/api
---
# Server Resource Rules

## API Structure

### Resource Organization
- Resources are organized by feature in `/src/server/api/{feature-name}/`
- Each resource follows this structure:
```
/feature-name/
  ├── feature-name.controller.ts     # Request handlers and routes
  ├── feature-name.repository.ts     # Data access
  ├── {name}-request.type.ts        # Input DTOs
  └── {name}-response.type.ts       # Output DTOs
```

### Controllers
- Export a routes object with HTTP methods
- Use BunRequest type for parameterized routes
- Handle authentication via request utils
- Return typed responses using response utils
- Follow REST conventions

Example:
```typescript
export const featureRoutes = {
  GET: () => getFeature(),
  POST: async (request: Request) => await postFeature(request),
  // For parameterized routes:
  "/api/feature/:param": {
    POST: async (request: BunRequest<"/api/feature/:param">) => 
      await featureController(request, request.params.param)
  }
};
```

### Repositories
- Use readCommands for SQL queries
- Define and use NULL values for types
- Return domain types, not DTOs
- Handle data transformations
- Use SQL utils for all database operations

Example:
```typescript
const featureSql = await readCommands("feature-name");

export const selectAllFeatures = (): Feature[] => {
  const results = selectAll<Feature>(featureSql.SELECT_ALL);
  return results || [];
};
```

### DTOs
- Use request/response suffix for clarity
- Define NULL values for response DTOs
- Keep DTOs simple and focused
- Validate incoming DTOs in controllers

Example:
```typescript
export type FeatureRequest = {
  name: string;
  description: string;
};

export type FeatureResponse = {
  id: number;
  name: string;
  description: string;
};

export const NULL_FEATURE_RESPONSE: FeatureResponse = {
  id: 0,
  name: "",
  description: ""
};
```

## Error Handling
- Use predefined API errors from api-error.type.ts
- Handle errors at controller level
- Log errors appropriately
- Return consistent error responses

## Authentication
- Validate user session in controllers when needed
- Use validateUserId utility for protected routes
- Handle unauthorized access consistently

## SQL
- Store SQL queries in /src/sql/{feature}.sql.json
- Use parameterized queries
- Follow SQL naming conventions
- Use readCommands utility to load queries

## Testing
- Test controllers with mock requests
- Test repositories with test database
- Test DTOs validation
- Test error scenarios
