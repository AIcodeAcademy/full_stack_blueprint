---
description: Generate client pages
globs: /src/client/app/*
alwaysApply: false
---
---
description: Generate client pages 
globs: /src/client/app/*
---

# Page Rules

## Core Concepts
- Pages are client-side route handlers in a Single Page Application
- Each page is a self-contained feature module with its own components and data access
- Pages follow a clean architecture pattern with clear separation of concerns:
  - Page Component: Route controller and state orchestrator
  - Presenter Components: UI logic and DOM manipulation 
  - Repository: Data access and API integration
  - 

## Structure
- Pages live in `src/client/app/{page-name}/` using kebab-case
- The page will be loaded by the [navigation.utils.ts](mdc:src/client/shared/navigation.utils.ts) in the `router-outlet` of the @app.component.ts
- Required files:
  - `{page-name}.page.ts` - Page controller component
  - `{page-name}.repository.ts` - Data access module
  - One or more presentational components as needed

## Page Component Guidelines
- Extend HTMLElement and export as default
- Keep minimal template logic - delegate complex UI to presenters
- Handle route parameters and state management
- Coordinate between presenters and repository 
- Sets presenters state via properties not attributes
- Follow lifecycle pattern:
  1. Constructor: Set initial template
  2. ConnectedCallback: select nodes and attach listeners
  3. DisconnectedCallbac: remove listeners
- See current @tools.page.ts as an example

## Repository Guidelines
- Export standalone async functions for API operations
- To access the server will use the utilities at [fetch.utils.ts](mdc:src/client/shared/fetch.utils.ts)  to get and post requests
- Return strongly typed responses or null/empty values
- Handle API errors gracefully
- Keep business logic in the page, repository is for data only
- See current [tools.repository.ts](mdc:src/client/app/about/tools.repository.ts) as an example

## Presenter Guidelines
- Create focused components for distinct UI sections
- Use semantic HTML and minimal styling
- Make use of [dom.utils.ts](mdc:src/client/shared/dom.utils.ts) to manipulate and hadle the DOM
- Gets state from parent via properties not attributes
- Communicate with page via custom events
- Follow component lifecycle for setup/cleanup
- See current [tools-table.component.ts](mdc:src/client/app/about/tools-table.component.ts) as an example

## Best Practices
- Define TypeScript types for all data structures
- Follow @type-script.mdc rules for TypeScript
- Follow @web.mdc rules for html, css code
