# Project structure

## Folders

- Prefer organization by feature than technology

```txt
dist/
docs/ 
src/
tests/
```

## File naming

- Export only one artifact per file
- Use the following naming convention `{{business}}.{{technical}}.ts`, where :
  - business is related to functional or specification domain
  - technical is one of: `type` | `component` | `util` ...


# Type Script rules

- Prefer `type` over `interface`
- Prefer functions over classes
- Prefer `#` over `_` for private members
- Avoid `null` and `undefined`
- Avoid deep nested anonymous functions by asigning named functions
- Avoid deep nested control structures by using early returns
- Validate data using plain TS functions no ValueObjects needed
- Avoid external libraries as much as possible

# Web rules

## HTML rules

- Use standard HTML semantic tags like : `article`, `section`, `nav`, `header`, `footer`, `aside`...
- Avoid `div` or `p` for layout and use proper semantic tags
- Add ARIA attributes for accessibility
- Add `role` attribute when needed
- Add `id` `name` or `role` attributes to facilitate node selections

## CSS rules

- We use PicoCSS as reset to avoid classes
- Do not create custom classes

## Images

- Avoid svg and use emojis for icons

## PicoCSS

- Use a basic reset such
- Use variables for colors, fonts, and spacing
- Use containers and grid for layout
- Nice to have light/dark mode

## Web APIs

- Use fetch API for HTTP requests
- Use localStorage for data storage
- Avoid external libraries as much as possible

## Web Components

- Use Web Components
- Do not use shadow DOM
- Write the template in a variable as 
  ```ts
  const html = String.raw;
  const template = html`<div>...</div>`;
  ```
- Use the `connectedCallback` lifecycle method to initialize the element
- Use the `disconnectedCallback` lifecycle method to destroy the element

# Git rules

## Initialize repo if not yet done

- Add a `.gitignore` file for the current tech stack

## Git commits

- Add any pending changes
- Generate a message with the summary of changes
- Using conventional commits for messages

## Git release

- Create or update a `CHANGELOG.md` file with messages from commits since last release
- Update version in `package.json` using semantic versioning
- Document the changes following docs guidelines
- Create a _tag_ for the release using semantic versioning
- Do not push any change, keep your work at local repository

# Testing

## Use Playwright for e2e testing

- Create one spec file for each feature at `/tests/{{feature number}}_{{feature name}}.spec.ts`
- Use **GWT** pattern for describing the tests.
- Use **AAA** pattern for organizing test code.
- Name variables following this convention: 
  - `inputX` for input data
  - `mockX` for mock functions or clasess
  - `actualX` for actual results
  - `expectedX` for expected results

## HTML CSS Selectors

- Read the current `src/components` implementation
- Prefer selection by role and content (like a user would do)
- Add any `id`, `role` or `name` attribute to source code to simplify test selections.

# Review

## Code documentation

- Add JSDoc comments to public or exported functions
- Do not add comments to private or inner blocks of code
- Except for really complex code that need a explain for the 'why'

## Project documentation

- Keep an `/docs/OVERVIEW.md` file with the tech stack, folder structure, and high-level architecture diagram
- Keep an `/docs/JOURNAL.md` file with the session chat key actions and decision
- Keep an `/README.md` file with info about the project and the dev test workflow
